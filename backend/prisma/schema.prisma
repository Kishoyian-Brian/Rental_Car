// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  name        String?
  password    String
  phone       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  role        UserRole   @default(CUSTOMER)
  status      UserStatus @default(ACTIVE)
  lastLogin   DateTime?
  resetToken  String?    @unique
  resetTokenExpiry DateTime?
  bookings    Booking[]
  payments    Payment[]
  reviews     Review[]
  @@map("users")
}

model Car {
  id           String     @id @default(uuid())
  make         String
  model        String
  year         Int
  licensePlate String     @unique
  category     CarCategory
  transmission TransmissionType
  fuelType     FuelType
  seats        Int
  doors        Int
  dailyRate    Float
  hourlyRate   Float?
  available    Boolean    @default(true)
  features     String[]
  imageUrls    String[]
  location     Location?  @relation(fields: [locationId], references: [id])
  locationId   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookings     Booking[]
  reviews      Review[]
  @@map("cars")
}

model Booking {
  id          String     @id @default(uuid())
  userId      String
  carId       String
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  paymentId   String?   @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  car         Car        @relation(fields: [carId], references: [id])
  payment     Payment?   @relation(fields: [paymentId], references: [id])
  @@map("bookings")
}

model Review {
  id          String     @id @default(uuid())
  rating      Int
  comment     String?
  userId      String
  carId       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  car         Car        @relation(fields: [carId], references: [id])
  @@map("reviews")
}

model Location {
  id          String     @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  cars        Car[]
  @@map("locations")
}

model Payment {
  id          String     @id @default(uuid())
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  userId      String
  booking     Booking?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  @@map("payments")
}

enum UserRole {
  CUSTOMER
  AGENT
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CarCategory {
  ECONOMY
  COMPACT
  MID_SIZE
  FULL_SIZE
  SUV
  LUXURY
  VAN
  SPORTS
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
}

enum FuelType {
  GASOLINE
  DIESEL
  HYBRID
  ELECTRIC
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_MONEY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}